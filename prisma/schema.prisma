generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                         BigInt               @id @default(autoincrement())
  external_id                String               @unique @db.VarChar(255)
  name                       String               @db.VarChar(255)
  base_price                 Decimal?             @map("base_price") @db.Decimal(10, 2)
  discounted_price           Decimal?             @map("discounted_price") @db.Decimal(10, 2)
  converted_base_price       Decimal?             @map("converted_base_price") @db.Decimal(10, 2)
  converted_discounted_price Decimal?             @map("converted_discounted_price") @db.Decimal(10, 2)
  description                String?
  release_date               DateTime?            @db.Timestamp(6)
  publisher_name             String?              @db.VarChar(255)
  genres                     String[]             @db.VarChar(255)
  platforms                  String[]             @db.VarChar(255)
  spoken_languages           String[]             @db.VarChar(255)
  screen_languages           String[]             @db.VarChar(255)
  categories                 String[]             @map("categories") @db.VarChar(255)
  average_rating             Decimal?             @db.Decimal(3, 2)
  total_ratings_count        Int?
  edition                    String?              @db.VarChar(255)
  media                      Json?
  cta_details                Json?
  service                    Service
  platform_types             PlatformType[]
  platform_constraints       PlatformConstraint[]
  pegi                       String?              @map("pegi") @db.VarChar(255)
  discount_end_date          DateTime?            @db.Timestamp(6)
  related_products           Json?
  updated_at                 DateTime             @default(now()) @updatedAt @db.Timestamp(6)
  active                     Boolean?             @default(true)
  eng_name                   String?              @default("") @db.VarChar(255)
  XboxWcId                   XboxWcId?

  @@map("products")
}

model XboxWcId {
  id         Int       @id @default(autoincrement())
  wc_id      Int       @unique
  product_id Int       @unique
  updated_at DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  product    Product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("xbox_wc_ids")
}

model ServiceLog {
  id           Int       @id @default(autoincrement())
  service_name String
  action_type  String
  start_time   DateTime  @db.Timestamp(6)
  end_time     DateTime? @db.Timestamp(6)
  status       String?
  message      String?
}

enum Service {
  PS
  Xbox
  Netflix
  Adobe
  Spotify
  ChatGPT
  Steam
}

enum PlatformType {
  console
  PC
  phone
}

enum PlatformConstraint {
  PS4
  PS5
  Xbox_One
  Xbox_Series_X_S
  PC
}
